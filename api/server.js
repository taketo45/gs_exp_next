
const express = require("express");


const app = express();

const cors = require("cors");

const { PrismaClient } = require("@prisma/client");
// const { PrismaClient } = require("./generated/prisma");
// import { PrismaClient } from './generated/prisma'

const bcrypt = require("bcrypt")

// json web token jwt„ÅÆÊ©üËÉΩ„ÇíË®≠ÂÆö„Åó„Åæ„Åôü§ó
const jwt = require("jsonwebtoken");

const PORT = 8888;

const prisma = new PrismaClient();

// ÂøÖ„Åöexpress.json()„ÅÆ‰∏ä„ÅßË®òËø∞ÔºÅ„Åù„ÅÜ„Åó„Å™„ÅÑ„Å®cors„ÅåÂõûÈÅø„Åß„Åç„Åæ„Åõ„ÇìÔºÅÔºÅ
app.use(cors());

// js„ÅßÊõ∏„ÅÑ„ÅüÊñáÂ≠óÂàó„Çíjson„Å®„Åó„Å¶express„Åß‰Ωø„Åà„Çã„Çà„ÅÜ„Å´„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åôü§ó
app.use(express.json());


// „Éü„Éâ„É´„Ç¶„Çß„Ç¢=„É¨„Çπ„Éà„É©„É≥„ÅÆÂÖ•„ÇäÂè£ „Åß „Äå‰∫àÁ¥Ñ„Åå„Åó„Å¶„ÇãÔºü„Äç„ÅÆÁ¢∫Ë™ç„ÅÆ„Çà„ÅÜ„Å™„Ç§„É°„Éº„Ç∏ü§ó
// ‰∫àÁ¥ÑÔºàÔºù„Éà„Éº„ÇØ„É≥Ôºâ„Åå„ÅÇ„Çã‰∫∫ ‚Üí Â∫óÂÜÖÔºàÔºùAPI„ÅÆÂá¶ÁêÜÔºâ„Å´ÈÄ≤„ÇÅ„Çã
// ‰∫àÁ¥Ñ„Åå„Å™„ÅÑ‰∫∫ ‚Üí ÂÖ•„Çå„Å™„ÅÑÔºà„Ç®„É©„Éº„Å´„Å™„ÇãÔºâ
const authenticateToken = (req, res, next) => {
  console.log("Authorization „Éò„ÉÉ„ÉÄ„Éº:", req.headers.authorization);

  const token = req.headers.authorization?.split(" ")[1]; //‰∫àÁ¥ÑÔºà„Éà„Éº„ÇØ„É≥Ôºâ„ÇíÂèñ„ÇäÂá∫„Åô
  console.log("ÊäΩÂá∫„Åï„Çå„Åü„Éà„Éº„ÇØ„É≥:", token);

  if (!token) {
    // ‰∫àÁ¥ÑÔºà„Éà„Éº„ÇØ„É≥Ôºâ„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ•„Çå„Å™„ÅÑ
    return res.status(401).json({ message: "Ë™çË®º„Éà„Éº„ÇØ„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ" });
  }

  try {
    const decoded = jwt.verify(token, process.env.KEY); //‰∫àÁ¥ÑÔºà„Éà„Éº„ÇØ„É≥Ôºâ„ÇíÁ¢∫Ë™ç
    console.log("„Éá„Ç≥„Éº„ÉâÁµêÊûú:", decoded);

    req.user = decoded; //OK„Å™„Çâ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíË®≠ÂÆöü§ó
    next(); // Â∫óÔºàAPI„ÅÆÂá¶ÁêÜÔºâ„Å´ÈÄ≤„ÇÅ„Çã
  } catch (error) {
    console.log("JWT Ê§úË®º„Ç®„É©„Éº:", error);
    return res.status(403).json({ message: "ÁÑ°Âäπ„Å™„Éà„Éº„ÇØ„É≥„Åß„Åô„ÄÇ" });
  }
};




app.get("/",(req, res) => {
  res.send("<h1>API‰Ωú„Å£„Å¶„ÅÑ„Çã„Çà!!!</h1>");
});

app.post("/api/auth/register", async (req, res) => {
  const { username, email, password } = req.body;

  const hashedPass = await bcrypt.hash(password, 10);

  const user = await prisma.user.create({
    data: {
      username,
      email,
      password: hashedPass,
    },
  });

  // token = „ÉÅ„Ç±„ÉÉ„Éà„ÅÆ„Ç§„É°„Éº„Ç∏ „ÇÇ„Åó„Åè„ÅØ ÂÖ•Â†¥Âà∏
  const token = jwt.sign({ id: user.id }, process.env.KEY, {
    expiresIn: "1d",
  });

  return res.json({ user,token });
});

app.post("/api/auth/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await prisma.user.findUnique({ where: {email} });
  if(!user){
    return res.status(404).json({
      error: "„Åù„ÅÆ„É¶„Éº„Ç∂„Éº„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì",
    });
  }

  const isPasswordCheck = await bcrypt.compare(password, user.password);

  if(!isPasswordCheck){
    return res.status(401).json({
      error: "„Åù„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ„Åæ„Å°„Åå„Å£„Å¶„ÅÑ„Åæ„Åô",
    });
  }

  // token = „ÉÅ„Ç±„ÉÉ„Éà„ÅÆ„Ç§„É°„Éº„Ç∏ „ÇÇ„Åó„Åè„ÅØ ÂÖ•Â†¥Âà∏
  const token = jwt.sign({ id: user.id }, process.env.KEY, {
    expiresIn: "1d",
  });

  return res.json({ token });

});


// ÊäïÁ®øAPI authenticateToken„ÅØÊ¨°„ÅÆ„Éö„Éº„Ç∏„ÅßË®òËø∞„Åó„Å¶„ÅÑ„Åæ„Åôü§ó
app.post("/api/post", authenticateToken, async (req, res) => {
  console.log("ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº ID:", req.user.id);
  //user„ÅÆid„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åæ„Åôü§ó„ÅåÊµÅ„Çå„Å®„Åó„Å¶„ÅØÊ¨°„ÅÆ„Éö„Éº„Ç∏„ÇíÂèÇËÄÉ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑü§ó

  const { content } = req.body;
  console.log(content, "content");
  // content„ÅåÁ©∫„ÅÆÊôÇ=ÊñáÂ≠ó„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅÆ„Åß„Åì„Åì„Åß„Ç®„É©„Éº„ÅßDB„Å´„Éá„Éº„Çø„ÇíÈÄÅ„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çãü§ó
  if (!content) {
    return res.status(400).json({ message: "ÊäïÁ®øÂÜÖÂÆπ„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì" });
  }

  try {
    // ÊàêÂäü„Åó„ÅüÊôÇ„Å´prisma„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„ÇíÁôªÈå≤„Åô„Çãü§ó
    const post = await prisma.post.create({
      data: {
        content,
        authorId: req.user.id,
      },
      include: {
        //„Åì„Åì„ÅØ„Éù„Ç§„É≥„Éà„Å´„Å™„Çä„Åæ„ÅôÔºÅ
        author: true,
      },
    });
    res.status(201).json(post);
  } catch (err) {
    console.log(err, "„Ç®„É©„ÉºÂÜÖÂÆπ");
    res.status(500).json({ message: "„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô„ÄÇ" });
  }

  // „Åì„ÅÆ‰∏ã„ÅØÊ∂à„Åï„Å™„ÅÑ
});

// ÊäïÁ®øÂèñÂæóAPIü§ó
app.get("/api/posts", async (req, res) => {
  try {
    // ÊàêÂäü„Åó„ÅüÊôÇ„Å´prisma„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„ÇíÂèñÂæóü§ó
    const posts = await prisma.post.findMany({
      take: 10, //„Åì„Çå„ÅßÊúÄÊñ∞„ÅÆ10‰ª∂„ÇíÂèñÂæó„Åß„Åç„Çãü§óË∂Ö‰æøÂà©ÔºÅ,
      orderBy: { createdAt: "desc" }, //„Åì„Çå„ÅßÁôªÈå≤Êó•„Åã„ÇâÈôçÈ†Ü„ÅßÂèñÂæó(ÁôªÈå≤„Åï„Çå„ÅüÊúÄÂæå„ÅÆ„ÇÇ„ÅÆ„Åã„ÇâÈ†ÜÁï™„Å´ÂèñÂæó)
      include: {
        //„Åì„Åì„ÅØ„Éù„Ç§„É≥„Éà„Å´„Å™„Çä„Åæ„ÅôÔºÅ
        author: true,
      },
    });
    res.status(201).json(posts);
  } catch (err) {
    console.log(err, "„Ç®„É©„ÉºÂÜÖÂÆπ");
    res.status(500).json({ message: "„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Åß„Åô„ÄÇ" });
  }

  // „Åì„ÅÆ‰∏ã„ÅØÊ∂à„Åï„Å™„ÅÑ
});



//„Åì„Åì„Åß„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åï„Åõ„Åæ„Åô
app.listen(PORT, () => console.log("server start!!!!!!"));